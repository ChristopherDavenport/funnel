-*- mode: grep; default-directory: "~/devel/funnel/" -*-
Grep started at Sat May  2 09:56:11

find . -type d \( -path \*/SCCS -o -path \*/RCS -o -path \*/CVS -o -path \*/MCVS -o -path \*/.svn -o -path \*/.git -o -path \*/.hg -o -path \*/.bzr -o -path \*/_MTN -o -path \*/_darcs -o -path \*/\{arch\} -o -path \*/.ensime_cache \) -prune -o \! -type d \( -name .\#\* -o -name \*.o -o -name \*\~ -o -name \*.bin -o -name \*.lbin -o -name \*.so -o -name \*.a -o -name \*.ln -o -name \*.blg -o -name \*.bbl -o -name \*.elc -o -name \*.lof -o -name \*.glo -o -name \*.idx -o -name \*.lot -o -name \*.fmt -o -name \*.tfm -o -name \*.class -o -name \*.fas -o -name \*.lib -o -name \*.mem -o -name \*.x86f -o -name \*.sparcf -o -name \*.dfsl -o -name \*.pfsl -o -name \*.d64fsl -o -name \*.p64fsl -o -name \*.lx64fsl -o -name \*.lx32fsl -o -name \*.dx64fsl -o -name \*.dx32fsl -o -name \*.fx64fsl -o -name \*.fx32fsl -o -name \*.sx64fsl -o -name \*.sx32fsl -o -name \*.wx64fsl -o -name \*.wx32fsl -o -name \*.fasl -o -name \*.ufsl -o -name \*.fsl -o -name \*.dxl -o -name \*.lo -o -name \*.la -o -name \*.gmo -o -name \*.mo -o -name \*.toc -o -name \*.aux -o -name \*.cp -o -name \*.fn -o -name \*.ky -o -name \*.pg -o -name \*.tp -o -name \*.vr -o -name \*.cps -o -name \*.fns -o -name \*.kys -o -name \*.pgs -o -name \*.tps -o -name \*.vrs -o -name \*.pyc -o -name \*.pyo \) -prune -o  -type f \( -iname \*.scala \) -exec grep  -nH -e Names {} +
./agent/src/main/scala/jmx/Import.scala:120:    val getAttributeNames: ObjectName => Set[(ObjectName,Attribute)] = { on =>
./agent/src/main/scala/jmx/Import.scala:126:    svr.toScala.queryNames(query).flatMap(getAttributeNames)
./agent/src/main/scala/jmx/Import.scala:132:  private[jmx] def readableAttributeNames(svr: MBeanServerConnection, query: Option[MBeanQuery]): Set[String] = {
./agent/src/main/scala/jmx/Import.scala:133:    val getAttributeNames: ObjectName => Set[String] = on =>
./agent/src/main/scala/jmx/Import.scala:136:      svr.toScala.queryNames(q).flatMap(getAttributeNames) }, Set.empty[String])
./aws/src/main/scala/ASG.scala:66:      ).withAutoScalingGroupNames(name)
./core/src/main/scala/Monitoring.scala:142:    nodeRetries: Names => Event = _ => defaultRetries
./core/src/main/scala/Monitoring.scala:176:            attemptMirrorAll(parse)(nodeRetries(Names(cluster, myName, localName)))(
./core/src/main/scala/Names.scala:3:final case class Names(kind: String, mine: String, theirs: String)
./flask/src/main/scala/main.scala:13:import funnel.{Events,DatapointParser,Datapoint,Names,Sigar,Monitoring,Instruments}
./flask/src/main/scala/main.scala:86:    def retries(names: Names): Event =
./messages/src/main/scala/telemetry.scala:17:final case class Error(names: Names) extends Telemetry {
./messages/src/main/scala/telemetry.scala:99:  implicit lazy val errorCodec = Codec.derive[Names].xmap[Error](Error(_), _.names)
./messages/src/multi-jvm/scala/TelemetrySocketSpec.scala:29:    Error(Names("kind1", "mine", "theirs")),
./messages/src/multi-jvm/scala/TelemetrySocketSpec.scala:30:    Error(Names("kind2", "mine", "theirs")),
./messages/src/multi-jvm/scala/TelemetrySocketSpec.scala:31:    Error(Names("kind3", "mine", "theirs")),
./messages/src/multi-jvm/scala/TelemetrySocketSpec.scala:32:    Error(Names("kind4", "mine", "theirs"))
./riemann/src/main/scala/Riemann.scala:147:    riemannRetries: Names => Event = _ => Monitoring.defaultRetries)(
./riemann/src/main/scala/Riemann.scala:153:    publish(M, ttlInSeconds, riemannRetries(Names("Riemann", myName, riemannName)))(riemannClient, actor)

Grep finished (matches found) at Sat May  2 09:56:12
