# The agent can be controlled simply by commenting out
# sections of this configuration file. For example,
# commenting out agent.http will disable the HTTP server
# when the agent loads.
agent {

  #############################################
  #                   Proxy                   #
  #############################################

  zeromq {
    # local file path of the domain socket incoming
    # metrics will arrive on.
    socket = "/tmp/funnel.socket"

    proxy {
      # network address to bind to from which the flask
      # will later connect. Must be accessible from the LAN
      host = "0.0.0.0"
      port = 7390
    }
  }

  #############################################
  #                 Importers                 #
  #############################################

  # recomended to keep network host to 127.0.0.1 as
  # each node should only ever be publishing metrics
  # to its loopback network address.

  http {
    host = "127.0.0.1"
    port = 8080
  }

  statsd {
    port   = 8125
    prefix = "oncue"
  }

  nginx {
    url = "http://127.0.0.1:8080/nginx_status"
    poll-frequency = 15 seconds
  }

  # currently only supports non-authenticated, non-ssl connections
  # designed to be use locally within a docker container or host.
  # processes running jmx typically need the following set:
  #
  # -Dcom.sun.management.jmxremote
  # -Dcom.sun.management.jmxremote.authenticate=false
  # -Dcom.sun.management.jmxremote.ssl=false
  # -Djava.rmi.server.hostname=?????
  # -Dcom.sun.management.jmxremote.port=????
  jmx {
    uri = "service:jmx:rmi:///jndi/rmi://127.0.0.1:67899/jmxrmi"

    # Examples of jmx queries are:
    # *:type=Foo,name=Bar to match names in any domain whose exact set of keys is type=Foo,name=Bar.
    # d:type=Foo,name=Bar,* to match names in the domain d that have the keys type=Foo,name=Bar plus zero or more other keys.
    # *:type=Foo,name=Bar,* to match names in any domain that has the keys type=Foo,name=Bar plus zero or more other keys.
    # d:type=F?o,name=Bar will match e.g. d:type=Foo,name=Bar and d:type=Fro,name=Bar.
    # d:type=F*o,name=Bar will match e.g. d:type=Fo,name=Bar and d:type=Frodo,name=Bar.
    # d:type=Foo,name="B*" will match e.g. d:type=Foo,name="Bling". Wildcards are recognized even inside quotes, and like other special characters can be escaped with \.
    queries = [ ]

    ignore-attribute-patterns = [ ]
  }
}
