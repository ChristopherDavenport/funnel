package funnel
package messages

import scalaz.concurrent._
import scalaz.syntax.traverse._
import scalaz.std.vector._
import scalaz.stream.async._
import scalaz.stream.{Process,Channel,io, Sink, wye}
import scalaz.std.anyVal._
import java.net.URI
import scalaz.{-\/,\/,\/-}
import Telemetry._
import org.scalatest.{FlatSpec,Matchers,BeforeAndAfterAll}

import instruments._

object metrics {
  val fooCount = counter("test/counter")
}

object config {
  val flask1Port = 8001
}


class SpecMultiJvmTarget1(port: Int, die: AtomicBoolean) {
  val incr = new Thread {
    def run() {
      while(!die.get) {
        fooCount.increment
        sleep(500)
      }
    }
  }

  MonitoringServer.start(Monitoring.default, port)
}

class SpecMultiJvmFlask1 extends FlatSpec with Matchers {
  def watch(port: Int): Unit =
}

class SpecMultiJvmChemist extends FlatSpec with Matchers {
  val repo = new StatefulRepository
  val lifecycleActor: Actor[Action] = Actor(a => Sharding.platformActionHandler(repo)(a).run)

  def life(): Unit = {
    val t = new Thread {
      def run() {
        sleep(1000)
        lifecycleActor ! "localhost"
        sleep(2000)
      }
    }
    t.start
  }
}
